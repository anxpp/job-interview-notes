// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: cost_meta_check_data.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PProvisioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted         uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy       string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id              uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string                 `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc            string                 `protobuf:"bytes,8,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ProvisionerName string                 `protobuf:"bytes,9,opt,name=ProvisionerName,proto3" json:"ProvisionerName,omitempty"`
	ProvisionerType string                 `protobuf:"bytes,10,opt,name=ProvisionerType,proto3" json:"ProvisionerType,omitempty"`
	CapAlgorithm    uint32                 `protobuf:"varint,11,opt,name=CapAlgorithm,proto3" json:"CapAlgorithm,omitempty"`
}

func (x *PProvisioner) Reset() {
	*x = PProvisioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PProvisioner) ProtoMessage() {}

func (x *PProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PProvisioner.ProtoReflect.Descriptor instead.
func (*PProvisioner) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{0}
}

func (x *PProvisioner) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PProvisioner) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PProvisioner) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PProvisioner) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PProvisioner) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PProvisioner) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PProvisioner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PProvisioner) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PProvisioner) GetProvisionerName() string {
	if x != nil {
		return x.ProvisionerName
	}
	return ""
}

func (x *PProvisioner) GetProvisionerType() string {
	if x != nil {
		return x.ProvisionerType
	}
	return ""
}

func (x *PProvisioner) GetCapAlgorithm() uint32 {
	if x != nil {
		return x.CapAlgorithm
	}
	return 0
}

type PTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted      uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy    string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy    string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id           uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Code         string                 `protobuf:"bytes,7,opt,name=Code,proto3" json:"Code,omitempty"`
	Name         string                 `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	OverrunLimit uint32                 `protobuf:"varint,9,opt,name=OverrunLimit,proto3" json:"OverrunLimit,omitempty"`
	IngressClass string                 `protobuf:"bytes,10,opt,name=IngressClass,proto3" json:"IngressClass,omitempty"`
	Company      string                 `protobuf:"bytes,11,opt,name=Company,proto3" json:"Company,omitempty"`
}

func (x *PTenant) Reset() {
	*x = PTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTenant) ProtoMessage() {}

func (x *PTenant) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTenant.ProtoReflect.Descriptor instead.
func (*PTenant) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{1}
}

func (x *PTenant) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PTenant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PTenant) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PTenant) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PTenant) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PTenant) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PTenant) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PTenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PTenant) GetOverrunLimit() uint32 {
	if x != nil {
		return x.OverrunLimit
	}
	return 0
}

func (x *PTenant) GetIngressClass() string {
	if x != nil {
		return x.IngressClass
	}
	return ""
}

func (x *PTenant) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

type PStorageClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id                uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	ClassName         string                 `protobuf:"bytes,7,opt,name=ClassName,proto3" json:"ClassName,omitempty"`
	Desc              string                 `protobuf:"bytes,8,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Resize            uint32                 `protobuf:"varint,9,opt,name=Resize,proto3" json:"Resize,omitempty"`
	RecycleType       uint32                 `protobuf:"varint,10,opt,name=RecycleType,proto3" json:"RecycleType,omitempty"`
	Provisioner       string                 `protobuf:"bytes,11,opt,name=Provisioner,proto3" json:"Provisioner,omitempty"`
	ProvisionerId     uint32                 `protobuf:"varint,12,opt,name=ProvisionerId,proto3" json:"ProvisionerId,omitempty"`
	ClusterId         uint32                 `protobuf:"varint,13,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	PhysicalClusterId uint32                 `protobuf:"varint,14,opt,name=PhysicalClusterId,proto3" json:"PhysicalClusterId,omitempty"`
}

func (x *PStorageClass) Reset() {
	*x = PStorageClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PStorageClass) ProtoMessage() {}

func (x *PStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PStorageClass.ProtoReflect.Descriptor instead.
func (*PStorageClass) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{2}
}

func (x *PStorageClass) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PStorageClass) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PStorageClass) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PStorageClass) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PStorageClass) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PStorageClass) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PStorageClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PStorageClass) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PStorageClass) GetResize() uint32 {
	if x != nil {
		return x.Resize
	}
	return 0
}

func (x *PStorageClass) GetRecycleType() uint32 {
	if x != nil {
		return x.RecycleType
	}
	return 0
}

func (x *PStorageClass) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *PStorageClass) GetProvisionerId() uint32 {
	if x != nil {
		return x.ProvisionerId
	}
	return 0
}

func (x *PStorageClass) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *PStorageClass) GetPhysicalClusterId() uint32 {
	if x != nil {
		return x.PhysicalClusterId
	}
	return 0
}

type PCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted          uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy        string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy        string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id               uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Name             string                 `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	NameCh           string                 `protobuf:"bytes,8,opt,name=NameCh,proto3" json:"NameCh,omitempty"`
	ZoneCode         string                 `protobuf:"bytes,9,opt,name=ZoneCode,proto3" json:"ZoneCode,omitempty"`
	ZoneName         string                 `protobuf:"bytes,10,opt,name=ZoneName,proto3" json:"ZoneName,omitempty"`
	PoolCode         string                 `protobuf:"bytes,11,opt,name=PoolCode,proto3" json:"PoolCode,omitempty"`
	PoolName         string                 `protobuf:"bytes,12,opt,name=PoolName,proto3" json:"PoolName,omitempty"`
	Type             uint32                 `protobuf:"varint,13,opt,name=Type,proto3" json:"Type,omitempty"`
	Category         uint32                 `protobuf:"varint,14,opt,name=Category,proto3" json:"Category,omitempty"`
	Sort             uint32                 `protobuf:"varint,15,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Label            string                 `protobuf:"bytes,16,opt,name=Label,proto3" json:"Label,omitempty"`
	IPCidr           string                 `protobuf:"bytes,17,opt,name=IPCidr,proto3" json:"IPCidr,omitempty"`
	VipCidr          string                 `protobuf:"bytes,18,opt,name=VipCidr,proto3" json:"VipCidr,omitempty"`
	HarborUrl        string                 `protobuf:"bytes,19,opt,name=HarborUrl,proto3" json:"HarborUrl,omitempty"`
	TillerUrl        string                 `protobuf:"bytes,20,opt,name=TillerUrl,proto3" json:"TillerUrl,omitempty"`
	CicdUrl          string                 `protobuf:"bytes,21,opt,name=CicdUrl,proto3" json:"CicdUrl,omitempty"`
	CloudUrl         string                 `protobuf:"bytes,22,opt,name=CloudUrl,proto3" json:"CloudUrl,omitempty"`
	CloudRedirectUrl string                 `protobuf:"bytes,23,opt,name=CloudRedirectUrl,proto3" json:"CloudRedirectUrl,omitempty"`
	OverrunLimit     uint32                 `protobuf:"varint,24,opt,name=OverrunLimit,proto3" json:"OverrunLimit,omitempty"`
	OveruseLimit     uint32                 `protobuf:"varint,25,opt,name=OveruseLimit,proto3" json:"OveruseLimit,omitempty"`
	DnsDomain        string                 `protobuf:"bytes,26,opt,name=DnsDomain,proto3" json:"DnsDomain,omitempty"`
	SearchDomain     string                 `protobuf:"bytes,27,opt,name=SearchDomain,proto3" json:"SearchDomain,omitempty"`
	SearchOption     string                 `protobuf:"bytes,28,opt,name=SearchOption,proto3" json:"SearchOption,omitempty"`
	Nameservers      string                 `protobuf:"bytes,29,opt,name=Nameservers,proto3" json:"Nameservers,omitempty"`
	IdcNo            string                 `protobuf:"bytes,30,opt,name=IdcNo,proto3" json:"IdcNo,omitempty"`
	NodeLabel        string                 `protobuf:"bytes,31,opt,name=NodeLabel,proto3" json:"NodeLabel,omitempty"`
	EtcdApiVersion   string                 `protobuf:"bytes,32,opt,name=EtcdApiVersion,proto3" json:"EtcdApiVersion,omitempty"`
	Scheduler        string                 `protobuf:"bytes,33,opt,name=Scheduler,proto3" json:"Scheduler,omitempty"`
	FixipOn          uint32                 `protobuf:"varint,34,opt,name=FixipOn,proto3" json:"FixipOn,omitempty"`
	SubnetId         uint32                 `protobuf:"varint,35,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
}

func (x *PCluster) Reset() {
	*x = PCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCluster) ProtoMessage() {}

func (x *PCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCluster.ProtoReflect.Descriptor instead.
func (*PCluster) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{3}
}

func (x *PCluster) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PCluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PCluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PCluster) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PCluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PCluster) GetNameCh() string {
	if x != nil {
		return x.NameCh
	}
	return ""
}

func (x *PCluster) GetZoneCode() string {
	if x != nil {
		return x.ZoneCode
	}
	return ""
}

func (x *PCluster) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *PCluster) GetPoolCode() string {
	if x != nil {
		return x.PoolCode
	}
	return ""
}

func (x *PCluster) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *PCluster) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PCluster) GetCategory() uint32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *PCluster) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PCluster) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PCluster) GetIPCidr() string {
	if x != nil {
		return x.IPCidr
	}
	return ""
}

func (x *PCluster) GetVipCidr() string {
	if x != nil {
		return x.VipCidr
	}
	return ""
}

func (x *PCluster) GetHarborUrl() string {
	if x != nil {
		return x.HarborUrl
	}
	return ""
}

func (x *PCluster) GetTillerUrl() string {
	if x != nil {
		return x.TillerUrl
	}
	return ""
}

func (x *PCluster) GetCicdUrl() string {
	if x != nil {
		return x.CicdUrl
	}
	return ""
}

func (x *PCluster) GetCloudUrl() string {
	if x != nil {
		return x.CloudUrl
	}
	return ""
}

func (x *PCluster) GetCloudRedirectUrl() string {
	if x != nil {
		return x.CloudRedirectUrl
	}
	return ""
}

func (x *PCluster) GetOverrunLimit() uint32 {
	if x != nil {
		return x.OverrunLimit
	}
	return 0
}

func (x *PCluster) GetOveruseLimit() uint32 {
	if x != nil {
		return x.OveruseLimit
	}
	return 0
}

func (x *PCluster) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

func (x *PCluster) GetSearchDomain() string {
	if x != nil {
		return x.SearchDomain
	}
	return ""
}

func (x *PCluster) GetSearchOption() string {
	if x != nil {
		return x.SearchOption
	}
	return ""
}

func (x *PCluster) GetNameservers() string {
	if x != nil {
		return x.Nameservers
	}
	return ""
}

func (x *PCluster) GetIdcNo() string {
	if x != nil {
		return x.IdcNo
	}
	return ""
}

func (x *PCluster) GetNodeLabel() string {
	if x != nil {
		return x.NodeLabel
	}
	return ""
}

func (x *PCluster) GetEtcdApiVersion() string {
	if x != nil {
		return x.EtcdApiVersion
	}
	return ""
}

func (x *PCluster) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

func (x *PCluster) GetFixipOn() uint32 {
	if x != nil {
		return x.FixipOn
	}
	return 0
}

func (x *PCluster) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

type PMwCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted       uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy     string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id            uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	MwClusterName string                 `protobuf:"bytes,7,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	MwClusterType string                 `protobuf:"bytes,8,opt,name=MwClusterType,proto3" json:"MwClusterType,omitempty"`
	MwVersion     string                 `protobuf:"bytes,9,opt,name=MwVersion,proto3" json:"MwVersion,omitempty"`
	TenantId      uint32                 `protobuf:"varint,10,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	ClusterId     uint32                 `protobuf:"varint,11,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	ClusterType   uint32                 `protobuf:"varint,12,opt,name=ClusterType,proto3" json:"ClusterType,omitempty"`
	EnvID         uint32                 `protobuf:"varint,13,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	Namespace     string                 `protobuf:"bytes,14,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	ParamUrl      string                 `protobuf:"bytes,15,opt,name=ParamUrl,proto3" json:"ParamUrl,omitempty"`
	Configs       string                 `protobuf:"bytes,16,opt,name=Configs,proto3" json:"Configs,omitempty"`
	NotifyUrl     string                 `protobuf:"bytes,17,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	Status        uint32                 `protobuf:"varint,18,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *PMwCluster) Reset() {
	*x = PMwCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMwCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMwCluster) ProtoMessage() {}

func (x *PMwCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMwCluster.ProtoReflect.Descriptor instead.
func (*PMwCluster) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{4}
}

func (x *PMwCluster) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PMwCluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PMwCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PMwCluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PMwCluster) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PMwCluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PMwCluster) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *PMwCluster) GetMwClusterType() string {
	if x != nil {
		return x.MwClusterType
	}
	return ""
}

func (x *PMwCluster) GetMwVersion() string {
	if x != nil {
		return x.MwVersion
	}
	return ""
}

func (x *PMwCluster) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *PMwCluster) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *PMwCluster) GetClusterType() uint32 {
	if x != nil {
		return x.ClusterType
	}
	return 0
}

func (x *PMwCluster) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PMwCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PMwCluster) GetParamUrl() string {
	if x != nil {
		return x.ParamUrl
	}
	return ""
}

func (x *PMwCluster) GetConfigs() string {
	if x != nil {
		return x.Configs
	}
	return ""
}

func (x *PMwCluster) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PMwCluster) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PMwContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted         uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy       string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id              uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	InstanceName    string                 `protobuf:"bytes,7,opt,name=InstanceName,proto3" json:"InstanceName,omitempty"`
	ComponentName   string                 `protobuf:"bytes,8,opt,name=ComponentName,proto3" json:"ComponentName,omitempty"`
	ComponentType   string                 `protobuf:"bytes,9,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	MwClusterName   string                 `protobuf:"bytes,10,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	MwClusterType   string                 `protobuf:"bytes,11,opt,name=MwClusterType,proto3" json:"MwClusterType,omitempty"`
	ClusterId       uint32                 `protobuf:"varint,12,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	TenantId        uint32                 `protobuf:"varint,13,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	EnvID           uint32                 `protobuf:"varint,14,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	InstanceId      uint32                 `protobuf:"varint,15,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	Name            string                 `protobuf:"bytes,16,opt,name=Name,proto3" json:"Name,omitempty"`
	ImageUrl        string                 `protobuf:"bytes,17,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	ContainerCPU    uint32                 `protobuf:"varint,18,opt,name=ContainerCPU,proto3" json:"ContainerCPU,omitempty"`
	ContainerMemory uint32                 `protobuf:"varint,19,opt,name=ContainerMemory,proto3" json:"ContainerMemory,omitempty"`
	ContainerGPU    uint32                 `protobuf:"varint,20,opt,name=ContainerGPU,proto3" json:"ContainerGPU,omitempty"`
}

func (x *PMwContainer) Reset() {
	*x = PMwContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMwContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMwContainer) ProtoMessage() {}

func (x *PMwContainer) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMwContainer.ProtoReflect.Descriptor instead.
func (*PMwContainer) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{5}
}

func (x *PMwContainer) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PMwContainer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PMwContainer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PMwContainer) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PMwContainer) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PMwContainer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PMwContainer) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *PMwContainer) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *PMwContainer) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *PMwContainer) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *PMwContainer) GetMwClusterType() string {
	if x != nil {
		return x.MwClusterType
	}
	return ""
}

func (x *PMwContainer) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *PMwContainer) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *PMwContainer) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PMwContainer) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *PMwContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PMwContainer) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *PMwContainer) GetContainerCPU() uint32 {
	if x != nil {
		return x.ContainerCPU
	}
	return 0
}

func (x *PMwContainer) GetContainerMemory() uint32 {
	if x != nil {
		return x.ContainerMemory
	}
	return 0
}

func (x *PMwContainer) GetContainerGPU() uint32 {
	if x != nil {
		return x.ContainerGPU
	}
	return 0
}

type PMwVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted          uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy        string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy        string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id               uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	ComponentName    string                 `protobuf:"bytes,7,opt,name=ComponentName,proto3" json:"ComponentName,omitempty"`
	ComponentType    string                 `protobuf:"bytes,8,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	MwClusterName    string                 `protobuf:"bytes,9,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	MwClusterType    string                 `protobuf:"bytes,10,opt,name=MwClusterType,proto3" json:"MwClusterType,omitempty"`
	ClusterId        uint32                 `protobuf:"varint,11,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	TenantId         uint32                 `protobuf:"varint,12,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	EnvID            uint32                 `protobuf:"varint,13,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	VolumeType       string                 `protobuf:"bytes,14,opt,name=VolumeType,proto3" json:"VolumeType,omitempty"`
	VolumeName       string                 `protobuf:"bytes,15,opt,name=VolumeName,proto3" json:"VolumeName,omitempty"`
	HostPath         string                 `protobuf:"bytes,16,opt,name=HostPath,proto3" json:"HostPath,omitempty"`
	VolumePath       string                 `protobuf:"bytes,17,opt,name=VolumePath,proto3" json:"VolumePath,omitempty"`
	FileContent      string                 `protobuf:"bytes,18,opt,name=FileContent,proto3" json:"FileContent,omitempty"`
	AccessModes      string                 `protobuf:"bytes,19,opt,name=AccessModes,proto3" json:"AccessModes,omitempty"`
	StorageClassName string                 `protobuf:"bytes,20,opt,name=StorageClassName,proto3" json:"StorageClassName,omitempty"`
	Quantity         uint32                 `protobuf:"varint,21,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	IsReadOnly       uint32                 `protobuf:"varint,22,opt,name=IsReadOnly,proto3" json:"IsReadOnly,omitempty"`
	Quota            uint32                 `protobuf:"varint,23,opt,name=Quota,proto3" json:"Quota,omitempty"`
}

func (x *PMwVolume) Reset() {
	*x = PMwVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMwVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMwVolume) ProtoMessage() {}

func (x *PMwVolume) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMwVolume.ProtoReflect.Descriptor instead.
func (*PMwVolume) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{6}
}

func (x *PMwVolume) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PMwVolume) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PMwVolume) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PMwVolume) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PMwVolume) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PMwVolume) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PMwVolume) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *PMwVolume) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *PMwVolume) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *PMwVolume) GetMwClusterType() string {
	if x != nil {
		return x.MwClusterType
	}
	return ""
}

func (x *PMwVolume) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *PMwVolume) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *PMwVolume) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PMwVolume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *PMwVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *PMwVolume) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *PMwVolume) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

func (x *PMwVolume) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

func (x *PMwVolume) GetAccessModes() string {
	if x != nil {
		return x.AccessModes
	}
	return ""
}

func (x *PMwVolume) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *PMwVolume) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PMwVolume) GetIsReadOnly() uint32 {
	if x != nil {
		return x.IsReadOnly
	}
	return 0
}

func (x *PMwVolume) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

type PClusterPhysical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id                uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Name              string                 `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	Code              string                 `protobuf:"bytes,8,opt,name=Code,proto3" json:"Code,omitempty"`
	KubeConfig        string                 `protobuf:"bytes,9,opt,name=KubeConfig,proto3" json:"KubeConfig,omitempty"`
	Type              uint32                 `protobuf:"varint,10,opt,name=Type,proto3" json:"Type,omitempty"`
	Search            string                 `protobuf:"bytes,11,opt,name=Search,proto3" json:"Search,omitempty"`
	Category          string                 `protobuf:"bytes,12,opt,name=Category,proto3" json:"Category,omitempty"`
	Nameservers       string                 `protobuf:"bytes,13,opt,name=Nameservers,proto3" json:"Nameservers,omitempty"`
	PodSubnet         string                 `protobuf:"bytes,14,opt,name=PodSubnet,proto3" json:"PodSubnet,omitempty"`
	VipSubnet         string                 `protobuf:"bytes,15,opt,name=VipSubnet,proto3" json:"VipSubnet,omitempty"`
	NodeSubnet        string                 `protobuf:"bytes,16,opt,name=NodeSubnet,proto3" json:"NodeSubnet,omitempty"`
	LoopbackVip       string                 `protobuf:"bytes,17,opt,name=LoopbackVip,proto3" json:"LoopbackVip,omitempty"`
	Calicoetcd        string                 `protobuf:"bytes,18,opt,name=Calicoetcd,proto3" json:"Calicoetcd,omitempty"`
	Clusteretcd       string                 `protobuf:"bytes,19,opt,name=Clusteretcd,proto3" json:"Clusteretcd,omitempty"`
	Storageuri        string                 `protobuf:"bytes,20,opt,name=Storageuri,proto3" json:"Storageuri,omitempty"`
	Netowrktype       string                 `protobuf:"bytes,21,opt,name=Netowrktype,proto3" json:"Netowrktype,omitempty"`
	K8Sapiaddr        string                 `protobuf:"bytes,22,opt,name=K8sapiaddr,proto3" json:"K8sapiaddr,omitempty"`
	K8SLocalDnsIp     string                 `protobuf:"bytes,23,opt,name=K8sLocalDnsIp,proto3" json:"K8sLocalDnsIp,omitempty"`
	K8SInstallVersion string                 `protobuf:"bytes,24,opt,name=K8sInstallVersion,proto3" json:"K8sInstallVersion,omitempty"`
	Kubeadmtoken      string                 `protobuf:"bytes,25,opt,name=Kubeadmtoken,proto3" json:"Kubeadmtoken,omitempty"`
	K8SL4LoadServers  string                 `protobuf:"bytes,26,opt,name=K8sL4LoadServers,proto3" json:"K8sL4LoadServers,omitempty"`
	SysopsAppName     string                 `protobuf:"bytes,27,opt,name=SysopsAppName,proto3" json:"SysopsAppName,omitempty"`
	SysopsToken       string                 `protobuf:"bytes,28,opt,name=SysopsToken,proto3" json:"SysopsToken,omitempty"`
	SysopsAddr        string                 `protobuf:"bytes,29,opt,name=SysopsAddr,proto3" json:"SysopsAddr,omitempty"`
}

func (x *PClusterPhysical) Reset() {
	*x = PClusterPhysical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PClusterPhysical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PClusterPhysical) ProtoMessage() {}

func (x *PClusterPhysical) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PClusterPhysical.ProtoReflect.Descriptor instead.
func (*PClusterPhysical) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{7}
}

func (x *PClusterPhysical) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PClusterPhysical) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PClusterPhysical) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PClusterPhysical) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PClusterPhysical) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PClusterPhysical) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PClusterPhysical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PClusterPhysical) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PClusterPhysical) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *PClusterPhysical) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PClusterPhysical) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *PClusterPhysical) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *PClusterPhysical) GetNameservers() string {
	if x != nil {
		return x.Nameservers
	}
	return ""
}

func (x *PClusterPhysical) GetPodSubnet() string {
	if x != nil {
		return x.PodSubnet
	}
	return ""
}

func (x *PClusterPhysical) GetVipSubnet() string {
	if x != nil {
		return x.VipSubnet
	}
	return ""
}

func (x *PClusterPhysical) GetNodeSubnet() string {
	if x != nil {
		return x.NodeSubnet
	}
	return ""
}

func (x *PClusterPhysical) GetLoopbackVip() string {
	if x != nil {
		return x.LoopbackVip
	}
	return ""
}

func (x *PClusterPhysical) GetCalicoetcd() string {
	if x != nil {
		return x.Calicoetcd
	}
	return ""
}

func (x *PClusterPhysical) GetClusteretcd() string {
	if x != nil {
		return x.Clusteretcd
	}
	return ""
}

func (x *PClusterPhysical) GetStorageuri() string {
	if x != nil {
		return x.Storageuri
	}
	return ""
}

func (x *PClusterPhysical) GetNetowrktype() string {
	if x != nil {
		return x.Netowrktype
	}
	return ""
}

func (x *PClusterPhysical) GetK8Sapiaddr() string {
	if x != nil {
		return x.K8Sapiaddr
	}
	return ""
}

func (x *PClusterPhysical) GetK8SLocalDnsIp() string {
	if x != nil {
		return x.K8SLocalDnsIp
	}
	return ""
}

func (x *PClusterPhysical) GetK8SInstallVersion() string {
	if x != nil {
		return x.K8SInstallVersion
	}
	return ""
}

func (x *PClusterPhysical) GetKubeadmtoken() string {
	if x != nil {
		return x.Kubeadmtoken
	}
	return ""
}

func (x *PClusterPhysical) GetK8SL4LoadServers() string {
	if x != nil {
		return x.K8SL4LoadServers
	}
	return ""
}

func (x *PClusterPhysical) GetSysopsAppName() string {
	if x != nil {
		return x.SysopsAppName
	}
	return ""
}

func (x *PClusterPhysical) GetSysopsToken() string {
	if x != nil {
		return x.SysopsToken
	}
	return ""
}

func (x *PClusterPhysical) GetSysopsAddr() string {
	if x != nil {
		return x.SysopsAddr
	}
	return ""
}

type PService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id                uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterId         uint32                 `protobuf:"varint,7,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	ClusterName       string                 `protobuf:"bytes,8,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ClusterType       uint32                 `protobuf:"varint,9,opt,name=ClusterType,proto3" json:"ClusterType,omitempty"`
	TenantId          uint32                 `protobuf:"varint,10,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	EnvID             uint32                 `protobuf:"varint,11,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	Namespace         string                 `protobuf:"bytes,12,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	ServiceName       string                 `protobuf:"bytes,13,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	ServiceVersion    string                 `protobuf:"bytes,14,opt,name=ServiceVersion,proto3" json:"ServiceVersion,omitempty"`
	ServiceType       uint32                 `protobuf:"varint,15,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	DeployType        string                 `protobuf:"bytes,16,opt,name=DeployType,proto3" json:"DeployType,omitempty"`
	DeployProcedure   uint32                 `protobuf:"varint,17,opt,name=DeployProcedure,proto3" json:"DeployProcedure,omitempty"`
	Phase             string                 `protobuf:"bytes,18,opt,name=Phase,proto3" json:"Phase,omitempty"`
	DcuCode           string                 `protobuf:"bytes,19,opt,name=DcuCode,proto3" json:"DcuCode,omitempty"`
	AppType           string                 `protobuf:"bytes,20,opt,name=AppType,proto3" json:"AppType,omitempty"`
	DcudeleteFrom     string                 `protobuf:"bytes,21,opt,name=DcudeleteFrom,proto3" json:"DcudeleteFrom,omitempty"`
	DcudeleteTo       string                 `protobuf:"bytes,22,opt,name=DcudeleteTo,proto3" json:"DcudeleteTo,omitempty"`
	RunningType       uint32                 `protobuf:"varint,23,opt,name=RunningType,proto3" json:"RunningType,omitempty"`
	LastCiID          string                 `protobuf:"bytes,24,opt,name=LastCiID,proto3" json:"LastCiID,omitempty"`
	LastDeployId      uint32                 `protobuf:"varint,25,opt,name=LastDeployId,proto3" json:"LastDeployId,omitempty"`
	Replicas          uint32                 `protobuf:"varint,26,opt,name=Replicas,proto3" json:"Replicas,omitempty"`
	FixIp             uint32                 `protobuf:"varint,27,opt,name=FixIp,proto3" json:"FixIp,omitempty"`
	DeployDefine      string                 `protobuf:"bytes,28,opt,name=DeployDefine,proto3" json:"DeployDefine,omitempty"`
	State             uint32                 `protobuf:"varint,29,opt,name=State,proto3" json:"State,omitempty"`
	StateReason       string                 `protobuf:"bytes,30,opt,name=StateReason,proto3" json:"StateReason,omitempty"`
	ResourceVersion   string                 `protobuf:"bytes,31,opt,name=ResourceVersion,proto3" json:"ResourceVersion,omitempty"`
	AppSetDeployId    uint32                 `protobuf:"varint,32,opt,name=AppSetDeployId,proto3" json:"AppSetDeployId,omitempty"`
	WarningStatus     uint32                 `protobuf:"varint,33,opt,name=WarningStatus,proto3" json:"WarningStatus,omitempty"`
	WarningBeginDate  *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=WarningBeginDate,proto3" json:"WarningBeginDate,omitempty"`
	WarningNotifyDate *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=WarningNotifyDate,proto3" json:"WarningNotifyDate,omitempty"`
	LeaseEndDate      *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=LeaseEndDate,proto3" json:"LeaseEndDate,omitempty"`
}

func (x *PService) Reset() {
	*x = PService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PService) ProtoMessage() {}

func (x *PService) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PService.ProtoReflect.Descriptor instead.
func (*PService) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{8}
}

func (x *PService) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PService) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PService) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PService) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PService) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PService) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PService) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *PService) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PService) GetClusterType() uint32 {
	if x != nil {
		return x.ClusterType
	}
	return 0
}

func (x *PService) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *PService) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PService) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *PService) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *PService) GetDeployType() string {
	if x != nil {
		return x.DeployType
	}
	return ""
}

func (x *PService) GetDeployProcedure() uint32 {
	if x != nil {
		return x.DeployProcedure
	}
	return 0
}

func (x *PService) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PService) GetDcuCode() string {
	if x != nil {
		return x.DcuCode
	}
	return ""
}

func (x *PService) GetAppType() string {
	if x != nil {
		return x.AppType
	}
	return ""
}

func (x *PService) GetDcudeleteFrom() string {
	if x != nil {
		return x.DcudeleteFrom
	}
	return ""
}

func (x *PService) GetDcudeleteTo() string {
	if x != nil {
		return x.DcudeleteTo
	}
	return ""
}

func (x *PService) GetRunningType() uint32 {
	if x != nil {
		return x.RunningType
	}
	return 0
}

func (x *PService) GetLastCiID() string {
	if x != nil {
		return x.LastCiID
	}
	return ""
}

func (x *PService) GetLastDeployId() uint32 {
	if x != nil {
		return x.LastDeployId
	}
	return 0
}

func (x *PService) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *PService) GetFixIp() uint32 {
	if x != nil {
		return x.FixIp
	}
	return 0
}

func (x *PService) GetDeployDefine() string {
	if x != nil {
		return x.DeployDefine
	}
	return ""
}

func (x *PService) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PService) GetStateReason() string {
	if x != nil {
		return x.StateReason
	}
	return ""
}

func (x *PService) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *PService) GetAppSetDeployId() uint32 {
	if x != nil {
		return x.AppSetDeployId
	}
	return 0
}

func (x *PService) GetWarningStatus() uint32 {
	if x != nil {
		return x.WarningStatus
	}
	return 0
}

func (x *PService) GetWarningBeginDate() *timestamppb.Timestamp {
	if x != nil {
		return x.WarningBeginDate
	}
	return nil
}

func (x *PService) GetWarningNotifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.WarningNotifyDate
	}
	return nil
}

func (x *PService) GetLeaseEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LeaseEndDate
	}
	return nil
}

type PServiceContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted         uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy       string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	ID              uint32                 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	ClusterID       uint32                 `protobuf:"varint,7,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	TenantID        uint32                 `protobuf:"varint,8,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	EnvID           uint32                 `protobuf:"varint,9,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	ServiceID       uint32                 `protobuf:"varint,10,opt,name=ServiceID,proto3" json:"ServiceID,omitempty"`
	Name            string                 `protobuf:"bytes,11,opt,name=Name,proto3" json:"Name,omitempty"`
	LastCommitID    string                 `protobuf:"bytes,12,opt,name=LastCommitID,proto3" json:"LastCommitID,omitempty"`
	ImageURL        string                 `protobuf:"bytes,13,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	ContainerCmd    string                 `protobuf:"bytes,14,opt,name=ContainerCmd,proto3" json:"ContainerCmd,omitempty"`
	ContainerArgs   string                 `protobuf:"bytes,15,opt,name=ContainerArgs,proto3" json:"ContainerArgs,omitempty"`
	ContainerCPU    uint32                 `protobuf:"varint,16,opt,name=ContainerCPU,proto3" json:"ContainerCPU,omitempty"`
	ContainerMemory uint32                 `protobuf:"varint,17,opt,name=ContainerMemory,proto3" json:"ContainerMemory,omitempty"`
	ContainerGPU    uint32                 `protobuf:"varint,18,opt,name=ContainerGPU,proto3" json:"ContainerGPU,omitempty"`
	Lifecycle       string                 `protobuf:"bytes,19,opt,name=Lifecycle,proto3" json:"Lifecycle,omitempty"`
}

func (x *PServiceContainer) Reset() {
	*x = PServiceContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PServiceContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PServiceContainer) ProtoMessage() {}

func (x *PServiceContainer) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PServiceContainer.ProtoReflect.Descriptor instead.
func (*PServiceContainer) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{9}
}

func (x *PServiceContainer) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PServiceContainer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PServiceContainer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PServiceContainer) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PServiceContainer) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PServiceContainer) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PServiceContainer) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *PServiceContainer) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *PServiceContainer) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PServiceContainer) GetServiceID() uint32 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

func (x *PServiceContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PServiceContainer) GetLastCommitID() string {
	if x != nil {
		return x.LastCommitID
	}
	return ""
}

func (x *PServiceContainer) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *PServiceContainer) GetContainerCmd() string {
	if x != nil {
		return x.ContainerCmd
	}
	return ""
}

func (x *PServiceContainer) GetContainerArgs() string {
	if x != nil {
		return x.ContainerArgs
	}
	return ""
}

func (x *PServiceContainer) GetContainerCPU() uint32 {
	if x != nil {
		return x.ContainerCPU
	}
	return 0
}

func (x *PServiceContainer) GetContainerMemory() uint32 {
	if x != nil {
		return x.ContainerMemory
	}
	return 0
}

func (x *PServiceContainer) GetContainerGPU() uint32 {
	if x != nil {
		return x.ContainerGPU
	}
	return 0
}

func (x *PServiceContainer) GetLifecycle() string {
	if x != nil {
		return x.Lifecycle
	}
	return ""
}

type PPersistVolumeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessMode       []string `protobuf:"bytes,1,rep,name=AccessMode,proto3" json:"AccessMode,omitempty"`
	StorageClassName string   `protobuf:"bytes,2,opt,name=StorageClassName,proto3" json:"StorageClassName,omitempty"`
	Quantity         string   `protobuf:"bytes,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *PPersistVolumeConf) Reset() {
	*x = PPersistVolumeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPersistVolumeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPersistVolumeConf) ProtoMessage() {}

func (x *PPersistVolumeConf) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPersistVolumeConf.ProtoReflect.Descriptor instead.
func (*PPersistVolumeConf) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{10}
}

func (x *PPersistVolumeConf) GetAccessMode() []string {
	if x != nil {
		return x.AccessMode
	}
	return nil
}

func (x *PPersistVolumeConf) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *PPersistVolumeConf) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

type PServiceVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	ID                uint32                 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	ClusterID         uint32                 `protobuf:"varint,7,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	TenantID          uint32                 `protobuf:"varint,8,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	EnvID             uint32                 `protobuf:"varint,9,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	ServiceID         uint32                 `protobuf:"varint,10,opt,name=ServiceID,proto3" json:"ServiceID,omitempty"`
	ContainerID       uint32                 `protobuf:"varint,11,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	VolumeType        string                 `protobuf:"bytes,12,opt,name=VolumeType,proto3" json:"VolumeType,omitempty"`
	VolumeName        string                 `protobuf:"bytes,13,opt,name=VolumeName,proto3" json:"VolumeName,omitempty"`
	HostPath          string                 `protobuf:"bytes,14,opt,name=HostPath,proto3" json:"HostPath,omitempty"`
	VolumePath        string                 `protobuf:"bytes,15,opt,name=VolumePath,proto3" json:"VolumePath,omitempty"`
	FileContent       string                 `protobuf:"bytes,16,opt,name=FileContent,proto3" json:"FileContent,omitempty"`
	PersistColumnConf *PPersistVolumeConf    `protobuf:"bytes,17,opt,name=PersistColumnConf,proto3" json:"PersistColumnConf,omitempty"`
	IsReadOnly        uint32                 `protobuf:"varint,18,opt,name=IsReadOnly,proto3" json:"IsReadOnly,omitempty"`
}

func (x *PServiceVolume) Reset() {
	*x = PServiceVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PServiceVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PServiceVolume) ProtoMessage() {}

func (x *PServiceVolume) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PServiceVolume.ProtoReflect.Descriptor instead.
func (*PServiceVolume) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{11}
}

func (x *PServiceVolume) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PServiceVolume) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PServiceVolume) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PServiceVolume) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PServiceVolume) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PServiceVolume) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PServiceVolume) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *PServiceVolume) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *PServiceVolume) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PServiceVolume) GetServiceID() uint32 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

func (x *PServiceVolume) GetContainerID() uint32 {
	if x != nil {
		return x.ContainerID
	}
	return 0
}

func (x *PServiceVolume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *PServiceVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *PServiceVolume) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *PServiceVolume) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

func (x *PServiceVolume) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

func (x *PServiceVolume) GetPersistColumnConf() *PPersistVolumeConf {
	if x != nil {
		return x.PersistColumnConf
	}
	return nil
}

func (x *PServiceVolume) GetIsReadOnly() uint32 {
	if x != nil {
		return x.IsReadOnly
	}
	return 0
}

type PTidbCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	ID                uint32                 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	TenantID          uint32                 `protobuf:"varint,7,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	ClusterID         uint32                 `protobuf:"varint,8,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	PhysicalClusterID uint32                 `protobuf:"varint,9,opt,name=PhysicalClusterID,proto3" json:"PhysicalClusterID,omitempty"`
	EnvID             uint32                 `protobuf:"varint,10,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	ClusterName       string                 `protobuf:"bytes,11,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
}

func (x *PTidbCluster) Reset() {
	*x = PTidbCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTidbCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTidbCluster) ProtoMessage() {}

func (x *PTidbCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTidbCluster.ProtoReflect.Descriptor instead.
func (*PTidbCluster) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{12}
}

func (x *PTidbCluster) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PTidbCluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PTidbCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PTidbCluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PTidbCluster) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PTidbCluster) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PTidbCluster) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *PTidbCluster) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *PTidbCluster) GetPhysicalClusterID() uint32 {
	if x != nil {
		return x.PhysicalClusterID
	}
	return 0
}

func (x *PTidbCluster) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PTidbCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type PTidbPods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted           uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	ID                uint32                 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string                 `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	ClusterID         uint32                 `protobuf:"varint,8,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	PhysicalClusterID uint32                 `protobuf:"varint,9,opt,name=PhysicalClusterID,proto3" json:"PhysicalClusterID,omitempty"`
	TidbClusterID     uint32                 `protobuf:"varint,10,opt,name=TidbClusterID,proto3" json:"TidbClusterID,omitempty"`
	TidbAppName       string                 `protobuf:"bytes,11,opt,name=TidbAppName,proto3" json:"TidbAppName,omitempty"`
	HostIp            string                 `protobuf:"bytes,12,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	PodIp             string                 `protobuf:"bytes,13,opt,name=PodIp,proto3" json:"PodIp,omitempty"`
	Cpu               uint32                 `protobuf:"varint,14,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Memory            uint32                 `protobuf:"varint,15,opt,name=Memory,proto3" json:"Memory,omitempty"`
	LocalPv           uint32                 `protobuf:"varint,16,opt,name=LocalPv,proto3" json:"LocalPv,omitempty"`
	EnvID             uint32                 `protobuf:"varint,17,opt,name=EnvID,proto3" json:"EnvID,omitempty"`
	TenantID          uint32                 `protobuf:"varint,18,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	Status            string                 `protobuf:"bytes,19,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *PTidbPods) Reset() {
	*x = PTidbPods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTidbPods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTidbPods) ProtoMessage() {}

func (x *PTidbPods) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTidbPods.ProtoReflect.Descriptor instead.
func (*PTidbPods) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{13}
}

func (x *PTidbPods) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PTidbPods) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PTidbPods) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PTidbPods) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PTidbPods) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PTidbPods) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PTidbPods) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PTidbPods) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *PTidbPods) GetPhysicalClusterID() uint32 {
	if x != nil {
		return x.PhysicalClusterID
	}
	return 0
}

func (x *PTidbPods) GetTidbClusterID() uint32 {
	if x != nil {
		return x.TidbClusterID
	}
	return 0
}

func (x *PTidbPods) GetTidbAppName() string {
	if x != nil {
		return x.TidbAppName
	}
	return ""
}

func (x *PTidbPods) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *PTidbPods) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *PTidbPods) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *PTidbPods) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *PTidbPods) GetLocalPv() uint32 {
	if x != nil {
		return x.LocalPv
	}
	return 0
}

func (x *PTidbPods) GetEnvID() uint32 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *PTidbPods) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *PTidbPods) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PClusterMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted    uint32                 `protobuf:"varint,1,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy  string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy  string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	Id         uint32                 `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterID  uint32                 `protobuf:"varint,7,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	PhysicalID uint32                 `protobuf:"varint,8,opt,name=PhysicalID,proto3" json:"PhysicalID,omitempty"`
}

func (x *PClusterMap) Reset() {
	*x = PClusterMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PClusterMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PClusterMap) ProtoMessage() {}

func (x *PClusterMap) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PClusterMap.ProtoReflect.Descriptor instead.
func (*PClusterMap) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{14}
}

func (x *PClusterMap) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *PClusterMap) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PClusterMap) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PClusterMap) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PClusterMap) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PClusterMap) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PClusterMap) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *PClusterMap) GetPhysicalID() uint32 {
	if x != nil {
		return x.PhysicalID
	}
	return 0
}

type PHostMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,4,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,5,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	ID                uint32                 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	PhysicalClusterId uint32                 `protobuf:"varint,7,opt,name=PhysicalClusterId,proto3" json:"PhysicalClusterId,omitempty"`
	LogicClusterId    uint32                 `protobuf:"varint,8,opt,name=LogicClusterId,proto3" json:"LogicClusterId,omitempty"`
	Ip                uint32                 `protobuf:"varint,9,opt,name=Ip,proto3" json:"Ip,omitempty"`
	HostName          string                 `protobuf:"bytes,10,opt,name=HostName,proto3" json:"HostName,omitempty"`
	HostCpu           uint32                 `protobuf:"varint,11,opt,name=HostCpu,proto3" json:"HostCpu,omitempty"`
	HostMem           string                 `protobuf:"bytes,12,opt,name=HostMem,proto3" json:"HostMem,omitempty"`
	HostDisk          string                 `protobuf:"bytes,13,opt,name=HostDisk,proto3" json:"HostDisk,omitempty"`
	HostNetworkCard   string                 `protobuf:"bytes,14,opt,name=HostNetworkCard,proto3" json:"HostNetworkCard,omitempty"`
	HostType          uint32                 `protobuf:"varint,15,opt,name=HostType,proto3" json:"HostType,omitempty"`
	HostGroup         uint32                 `protobuf:"varint,16,opt,name=HostGroup,proto3" json:"HostGroup,omitempty"`
	HostRunStatus     uint32                 `protobuf:"varint,17,opt,name=HostRunStatus,proto3" json:"HostRunStatus,omitempty"`
	HostTenant        string                 `protobuf:"bytes,18,opt,name=HostTenant,proto3" json:"HostTenant,omitempty"`
	HostRole          string                 `protobuf:"bytes,19,opt,name=HostRole,proto3" json:"HostRole,omitempty"`
	CpuCapacity       uint32                 `protobuf:"varint,20,opt,name=CpuCapacity,proto3" json:"CpuCapacity,omitempty"`
	CpuAllocatable    uint32                 `protobuf:"varint,21,opt,name=CpuAllocatable,proto3" json:"CpuAllocatable,omitempty"`
	MemCapacity       uint32                 `protobuf:"varint,22,opt,name=MemCapacity,proto3" json:"MemCapacity,omitempty"`
	MemAllocatable    uint32                 `protobuf:"varint,23,opt,name=MemAllocatable,proto3" json:"MemAllocatable,omitempty"`
	GpuCapacity       uint32                 `protobuf:"varint,24,opt,name=GpuCapacity,proto3" json:"GpuCapacity,omitempty"`
	GpuAllocatable    uint32                 `protobuf:"varint,25,opt,name=GpuAllocatable,proto3" json:"GpuAllocatable,omitempty"`
	GpuSize           uint32                 `protobuf:"varint,26,opt,name=GpuSize,proto3" json:"GpuSize,omitempty"`
	CalicoAsnumber    uint32                 `protobuf:"varint,27,opt,name=CalicoAsnumber,proto3" json:"CalicoAsnumber,omitempty"`
	CalicoCidr        string                 `protobuf:"bytes,28,opt,name=CalicoCidr,proto3" json:"CalicoCidr,omitempty"`
	CalicoPeerip      string                 `protobuf:"bytes,29,opt,name=CalicoPeerip,proto3" json:"CalicoPeerip,omitempty"`
	CalicoIdcNetwork  string                 `protobuf:"bytes,30,opt,name=CalicoIdcNetwork,proto3" json:"CalicoIdcNetwork,omitempty"`
	CalicoBlocksize   uint32                 `protobuf:"varint,31,opt,name=CalicoBlocksize,proto3" json:"CalicoBlocksize,omitempty"`
	K8SLabels         map[string]string      `protobuf:"bytes,32,rep,name=K8sLabels,proto3" json:"K8sLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DockerNetwork     string                 `protobuf:"bytes,33,opt,name=DockerNetwork,proto3" json:"DockerNetwork,omitempty"`
	SoftwareList      string                 `protobuf:"bytes,34,opt,name=SoftwareList,proto3" json:"SoftwareList,omitempty"`
	SecurityBaseline  string                 `protobuf:"bytes,35,opt,name=SecurityBaseline,proto3" json:"SecurityBaseline,omitempty"`
}

func (x *PHostMsg) Reset() {
	*x = PHostMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHostMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHostMsg) ProtoMessage() {}

func (x *PHostMsg) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHostMsg.ProtoReflect.Descriptor instead.
func (*PHostMsg) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{15}
}

func (x *PHostMsg) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PHostMsg) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PHostMsg) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PHostMsg) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PHostMsg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PHostMsg) GetPhysicalClusterId() uint32 {
	if x != nil {
		return x.PhysicalClusterId
	}
	return 0
}

func (x *PHostMsg) GetLogicClusterId() uint32 {
	if x != nil {
		return x.LogicClusterId
	}
	return 0
}

func (x *PHostMsg) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *PHostMsg) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PHostMsg) GetHostCpu() uint32 {
	if x != nil {
		return x.HostCpu
	}
	return 0
}

func (x *PHostMsg) GetHostMem() string {
	if x != nil {
		return x.HostMem
	}
	return ""
}

func (x *PHostMsg) GetHostDisk() string {
	if x != nil {
		return x.HostDisk
	}
	return ""
}

func (x *PHostMsg) GetHostNetworkCard() string {
	if x != nil {
		return x.HostNetworkCard
	}
	return ""
}

func (x *PHostMsg) GetHostType() uint32 {
	if x != nil {
		return x.HostType
	}
	return 0
}

func (x *PHostMsg) GetHostGroup() uint32 {
	if x != nil {
		return x.HostGroup
	}
	return 0
}

func (x *PHostMsg) GetHostRunStatus() uint32 {
	if x != nil {
		return x.HostRunStatus
	}
	return 0
}

func (x *PHostMsg) GetHostTenant() string {
	if x != nil {
		return x.HostTenant
	}
	return ""
}

func (x *PHostMsg) GetHostRole() string {
	if x != nil {
		return x.HostRole
	}
	return ""
}

func (x *PHostMsg) GetCpuCapacity() uint32 {
	if x != nil {
		return x.CpuCapacity
	}
	return 0
}

func (x *PHostMsg) GetCpuAllocatable() uint32 {
	if x != nil {
		return x.CpuAllocatable
	}
	return 0
}

func (x *PHostMsg) GetMemCapacity() uint32 {
	if x != nil {
		return x.MemCapacity
	}
	return 0
}

func (x *PHostMsg) GetMemAllocatable() uint32 {
	if x != nil {
		return x.MemAllocatable
	}
	return 0
}

func (x *PHostMsg) GetGpuCapacity() uint32 {
	if x != nil {
		return x.GpuCapacity
	}
	return 0
}

func (x *PHostMsg) GetGpuAllocatable() uint32 {
	if x != nil {
		return x.GpuAllocatable
	}
	return 0
}

func (x *PHostMsg) GetGpuSize() uint32 {
	if x != nil {
		return x.GpuSize
	}
	return 0
}

func (x *PHostMsg) GetCalicoAsnumber() uint32 {
	if x != nil {
		return x.CalicoAsnumber
	}
	return 0
}

func (x *PHostMsg) GetCalicoCidr() string {
	if x != nil {
		return x.CalicoCidr
	}
	return ""
}

func (x *PHostMsg) GetCalicoPeerip() string {
	if x != nil {
		return x.CalicoPeerip
	}
	return ""
}

func (x *PHostMsg) GetCalicoIdcNetwork() string {
	if x != nil {
		return x.CalicoIdcNetwork
	}
	return ""
}

func (x *PHostMsg) GetCalicoBlocksize() uint32 {
	if x != nil {
		return x.CalicoBlocksize
	}
	return 0
}

func (x *PHostMsg) GetK8SLabels() map[string]string {
	if x != nil {
		return x.K8SLabels
	}
	return nil
}

func (x *PHostMsg) GetDockerNetwork() string {
	if x != nil {
		return x.DockerNetwork
	}
	return ""
}

func (x *PHostMsg) GetSoftwareList() string {
	if x != nil {
		return x.SoftwareList
	}
	return ""
}

func (x *PHostMsg) GetSecurityBaseline() string {
	if x != nil {
		return x.SecurityBaseline
	}
	return ""
}

// protoc --go_out=. cost_meta_check_data.proto
type PCostMetaCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionerList         []*PProvisioner      `protobuf:"bytes,1,rep,name=ProvisionerList,proto3" json:"ProvisionerList,omitempty"`
	TenantList              []*PTenant           `protobuf:"bytes,2,rep,name=TenantList,proto3" json:"TenantList,omitempty"`
	StorageClassList        []*PStorageClass     `protobuf:"bytes,3,rep,name=StorageClassList,proto3" json:"StorageClassList,omitempty"`
	ClusterMapList          []*PClusterMap       `protobuf:"bytes,4,rep,name=ClusterMapList,proto3" json:"ClusterMapList,omitempty"`
	ClusterLogic            *PCluster            `protobuf:"bytes,5,opt,name=ClusterLogic,proto3" json:"ClusterLogic,omitempty"`
	MiddlewareClusterList   []*PMwCluster        `protobuf:"bytes,6,rep,name=MiddlewareClusterList,proto3" json:"MiddlewareClusterList,omitempty"`
	MiddlewareContainerList []*PMwContainer      `protobuf:"bytes,7,rep,name=MiddlewareContainerList,proto3" json:"MiddlewareContainerList,omitempty"`
	MiddlewareVolumeList    []*PMwVolume         `protobuf:"bytes,8,rep,name=MiddlewareVolumeList,proto3" json:"MiddlewareVolumeList,omitempty"`
	ClusterPhysical         *PClusterPhysical    `protobuf:"bytes,9,opt,name=ClusterPhysical,proto3" json:"ClusterPhysical,omitempty"`
	ServiceList             []*PService          `protobuf:"bytes,10,rep,name=ServiceList,proto3" json:"ServiceList,omitempty"`
	ServiceContainerList    []*PServiceContainer `protobuf:"bytes,11,rep,name=ServiceContainerList,proto3" json:"ServiceContainerList,omitempty"`
	ServiceVolumeList       []*PServiceVolume    `protobuf:"bytes,12,rep,name=ServiceVolumeList,proto3" json:"ServiceVolumeList,omitempty"`
	TiDBClusterList         []*PTidbCluster      `protobuf:"bytes,13,rep,name=TiDBClusterList,proto3" json:"TiDBClusterList,omitempty"`
	TiDBPodList             []*PTidbPods         `protobuf:"bytes,14,rep,name=TiDBPodList,proto3" json:"TiDBPodList,omitempty"`
	HostMsgList             []*PHostMsg          `protobuf:"bytes,15,rep,name=HostMsgList,proto3" json:"HostMsgList,omitempty"`
	PhysicalHostIps         []uint32             `protobuf:"varint,16,rep,packed,name=PhysicalHostIps,proto3" json:"PhysicalHostIps,omitempty"`
	LogicHostIps            []uint32             `protobuf:"varint,17,rep,packed,name=LogicHostIps,proto3" json:"LogicHostIps,omitempty"`
}

func (x *PCostMetaCheckData) Reset() {
	*x = PCostMetaCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_meta_check_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCostMetaCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCostMetaCheckData) ProtoMessage() {}

func (x *PCostMetaCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_cost_meta_check_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCostMetaCheckData.ProtoReflect.Descriptor instead.
func (*PCostMetaCheckData) Descriptor() ([]byte, []int) {
	return file_cost_meta_check_data_proto_rawDescGZIP(), []int{16}
}

func (x *PCostMetaCheckData) GetProvisionerList() []*PProvisioner {
	if x != nil {
		return x.ProvisionerList
	}
	return nil
}

func (x *PCostMetaCheckData) GetTenantList() []*PTenant {
	if x != nil {
		return x.TenantList
	}
	return nil
}

func (x *PCostMetaCheckData) GetStorageClassList() []*PStorageClass {
	if x != nil {
		return x.StorageClassList
	}
	return nil
}

func (x *PCostMetaCheckData) GetClusterMapList() []*PClusterMap {
	if x != nil {
		return x.ClusterMapList
	}
	return nil
}

func (x *PCostMetaCheckData) GetClusterLogic() *PCluster {
	if x != nil {
		return x.ClusterLogic
	}
	return nil
}

func (x *PCostMetaCheckData) GetMiddlewareClusterList() []*PMwCluster {
	if x != nil {
		return x.MiddlewareClusterList
	}
	return nil
}

func (x *PCostMetaCheckData) GetMiddlewareContainerList() []*PMwContainer {
	if x != nil {
		return x.MiddlewareContainerList
	}
	return nil
}

func (x *PCostMetaCheckData) GetMiddlewareVolumeList() []*PMwVolume {
	if x != nil {
		return x.MiddlewareVolumeList
	}
	return nil
}

func (x *PCostMetaCheckData) GetClusterPhysical() *PClusterPhysical {
	if x != nil {
		return x.ClusterPhysical
	}
	return nil
}

func (x *PCostMetaCheckData) GetServiceList() []*PService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *PCostMetaCheckData) GetServiceContainerList() []*PServiceContainer {
	if x != nil {
		return x.ServiceContainerList
	}
	return nil
}

func (x *PCostMetaCheckData) GetServiceVolumeList() []*PServiceVolume {
	if x != nil {
		return x.ServiceVolumeList
	}
	return nil
}

func (x *PCostMetaCheckData) GetTiDBClusterList() []*PTidbCluster {
	if x != nil {
		return x.TiDBClusterList
	}
	return nil
}

func (x *PCostMetaCheckData) GetTiDBPodList() []*PTidbPods {
	if x != nil {
		return x.TiDBPodList
	}
	return nil
}

func (x *PCostMetaCheckData) GetHostMsgList() []*PHostMsg {
	if x != nil {
		return x.HostMsgList
	}
	return nil
}

func (x *PCostMetaCheckData) GetPhysicalHostIps() []uint32 {
	if x != nil {
		return x.PhysicalHostIps
	}
	return nil
}

func (x *PCostMetaCheckData) GetLogicHostIps() []uint32 {
	if x != nil {
		return x.LogicHostIps
	}
	return nil
}

var File_cost_meta_check_data_proto protoreflect.FileDescriptor

var file_cost_meta_check_data_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x43, 0x61, 0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xed, 0x02, 0x0a,
	0x07, 0x50, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0xe9, 0x03, 0x0a,
	0x0d, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x08, 0x0a, 0x08, 0x50, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x5a,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x50, 0x43, 0x69, 0x64, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x50, 0x43, 0x69, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x62, 0x6f,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x61, 0x72, 0x62,
	0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6c, 0x6c, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x69, 0x63, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x69, 0x63, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76, 0x65,
	0x72, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4f, 0x76, 0x65, 0x72, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x63, 0x4e, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x64, 0x63, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x74, 0x63,
	0x64, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x74, 0x63, 0x64, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x69, 0x70, 0x4f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x46, 0x69, 0x78, 0x69, 0x70, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0xcc, 0x04, 0x0a, 0x0a, 0x50, 0x4d, 0x77, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x05, 0x0a, 0x0c, 0x50, 0x4d, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x22, 0x8b, 0x06,
	0x0a, 0x09, 0x50, 0x4d, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xcc, 0x07, 0x0a, 0x10,
	0x50, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69,
	0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56,
	0x69, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x56, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61,
	0x6c, 0x69, 0x63, 0x6f, 0x65, 0x74, 0x63, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x65, 0x74, 0x63, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x74, 0x63, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x74, 0x63, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x75, 0x72, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x75, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b,
	0x4e, 0x65, 0x74, 0x6f, 0x77, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x6f, 0x77, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4b, 0x38, 0x73, 0x61, 0x70, 0x69, 0x61, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4b, 0x38, 0x73, 0x61, 0x70, 0x69, 0x61, 0x64, 0x64, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x4b, 0x38, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x49, 0x70, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x38, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x6e, 0x73, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x38, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x4b, 0x38, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4b, 0x75, 0x62, 0x65, 0x61, 0x64, 0x6d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x75, 0x62, 0x65, 0x61, 0x64,
	0x6d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4b, 0x38, 0x73, 0x4c, 0x34, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4b, 0x38, 0x73, 0x4c, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x79, 0x73, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x6f,
	0x70, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x79, 0x73, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x6f, 0x70, 0x73, 0x41, 0x64, 0x64, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x79, 0x73, 0x6f, 0x70, 0x73, 0x41, 0x64, 0x64, 0x72, 0x22, 0x98, 0x0a, 0x0a, 0x08, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x63, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x44, 0x63, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x63, 0x75, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x63, 0x75, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x63, 0x75,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x63, 0x75, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x78,
	0x49, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x69, 0x78, 0x49, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x89, 0x05, 0x0a, 0x11, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50,
	0x55, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x50, 0x55, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x50, 0x55, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x22, 0x7c, 0x0a, 0x12, 0x50, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xfe, 0x04, 0x0a, 0x0e, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x11, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0x88, 0x03, 0x0a, 0x0c, 0x50, 0x54, 0x69, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x09,
	0x50, 0x54, 0x69, 0x64, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x69, 0x64, 0x62,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x69, 0x64,
	0x62, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x54, 0x69, 0x64, 0x62, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x70, 0x75,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x76, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x76, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e,
	0x76, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0b, 0x50, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x22,
	0x8b, 0x0a, 0x0a, 0x08, 0x50, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x70, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x28,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x70, 0x75, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x70, 0x75, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x43, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x65, 0x6d, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x70, 0x75, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47,
	0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x70,
	0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x41, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x41, 0x73, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x43, 0x69,
	0x64, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f,
	0x43, 0x69, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x69,
	0x63, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x69,
	0x63, 0x6f, 0x49, 0x64, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x49, 0x64, 0x63, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43,
	0x61, 0x6c, 0x69, 0x63, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x4b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x2e,
	0x4b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x4b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x07,
	0x0a, 0x12, 0x50, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x15, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x4d, 0x77, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x15, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x4d, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x14, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x4d, 0x77,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x14, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x14,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x54, 0x69, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x54, 0x69, 0x64, 0x62, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x54, 0x69, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x54, 0x69, 0x44, 0x42, 0x50, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x54, 0x69, 0x64, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x0b, 0x54, 0x69, 0x44, 0x42, 0x50,
	0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x6d, 0x73, 0x78, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x73, 0x78, 0x66, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cost_meta_check_data_proto_rawDescOnce sync.Once
	file_cost_meta_check_data_proto_rawDescData = file_cost_meta_check_data_proto_rawDesc
)

func file_cost_meta_check_data_proto_rawDescGZIP() []byte {
	file_cost_meta_check_data_proto_rawDescOnce.Do(func() {
		file_cost_meta_check_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cost_meta_check_data_proto_rawDescData)
	})
	return file_cost_meta_check_data_proto_rawDescData
}

var file_cost_meta_check_data_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cost_meta_check_data_proto_goTypes = []interface{}{
	(*PProvisioner)(nil),          // 0: pb.PProvisioner
	(*PTenant)(nil),               // 1: pb.PTenant
	(*PStorageClass)(nil),         // 2: pb.PStorageClass
	(*PCluster)(nil),              // 3: pb.PCluster
	(*PMwCluster)(nil),            // 4: pb.PMwCluster
	(*PMwContainer)(nil),          // 5: pb.PMwContainer
	(*PMwVolume)(nil),             // 6: pb.PMwVolume
	(*PClusterPhysical)(nil),      // 7: pb.PClusterPhysical
	(*PService)(nil),              // 8: pb.PService
	(*PServiceContainer)(nil),     // 9: pb.PServiceContainer
	(*PPersistVolumeConf)(nil),    // 10: pb.PPersistVolumeConf
	(*PServiceVolume)(nil),        // 11: pb.PServiceVolume
	(*PTidbCluster)(nil),          // 12: pb.PTidbCluster
	(*PTidbPods)(nil),             // 13: pb.PTidbPods
	(*PClusterMap)(nil),           // 14: pb.PClusterMap
	(*PHostMsg)(nil),              // 15: pb.PHostMsg
	(*PCostMetaCheckData)(nil),    // 16: pb.PCostMetaCheckData
	nil,                           // 17: pb.PHostMsg.K8sLabelsEntry
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_cost_meta_check_data_proto_depIdxs = []int32{
	18, // 0: pb.PProvisioner.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 1: pb.PProvisioner.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 2: pb.PTenant.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 3: pb.PTenant.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 4: pb.PStorageClass.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 5: pb.PStorageClass.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 6: pb.PCluster.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 7: pb.PCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 8: pb.PMwCluster.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 9: pb.PMwCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 10: pb.PMwContainer.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 11: pb.PMwContainer.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 12: pb.PMwVolume.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 13: pb.PMwVolume.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 14: pb.PClusterPhysical.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 15: pb.PClusterPhysical.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 16: pb.PService.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 17: pb.PService.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 18: pb.PService.WarningBeginDate:type_name -> google.protobuf.Timestamp
	18, // 19: pb.PService.WarningNotifyDate:type_name -> google.protobuf.Timestamp
	18, // 20: pb.PService.LeaseEndDate:type_name -> google.protobuf.Timestamp
	18, // 21: pb.PServiceContainer.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 22: pb.PServiceContainer.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 23: pb.PServiceVolume.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 24: pb.PServiceVolume.UpdatedAt:type_name -> google.protobuf.Timestamp
	10, // 25: pb.PServiceVolume.PersistColumnConf:type_name -> pb.PPersistVolumeConf
	18, // 26: pb.PTidbCluster.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 27: pb.PTidbCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 28: pb.PTidbPods.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 29: pb.PTidbPods.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 30: pb.PClusterMap.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 31: pb.PClusterMap.UpdatedAt:type_name -> google.protobuf.Timestamp
	18, // 32: pb.PHostMsg.CreatedAt:type_name -> google.protobuf.Timestamp
	18, // 33: pb.PHostMsg.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 34: pb.PHostMsg.K8sLabels:type_name -> pb.PHostMsg.K8sLabelsEntry
	0,  // 35: pb.PCostMetaCheckData.ProvisionerList:type_name -> pb.PProvisioner
	1,  // 36: pb.PCostMetaCheckData.TenantList:type_name -> pb.PTenant
	2,  // 37: pb.PCostMetaCheckData.StorageClassList:type_name -> pb.PStorageClass
	14, // 38: pb.PCostMetaCheckData.ClusterMapList:type_name -> pb.PClusterMap
	3,  // 39: pb.PCostMetaCheckData.ClusterLogic:type_name -> pb.PCluster
	4,  // 40: pb.PCostMetaCheckData.MiddlewareClusterList:type_name -> pb.PMwCluster
	5,  // 41: pb.PCostMetaCheckData.MiddlewareContainerList:type_name -> pb.PMwContainer
	6,  // 42: pb.PCostMetaCheckData.MiddlewareVolumeList:type_name -> pb.PMwVolume
	7,  // 43: pb.PCostMetaCheckData.ClusterPhysical:type_name -> pb.PClusterPhysical
	8,  // 44: pb.PCostMetaCheckData.ServiceList:type_name -> pb.PService
	9,  // 45: pb.PCostMetaCheckData.ServiceContainerList:type_name -> pb.PServiceContainer
	11, // 46: pb.PCostMetaCheckData.ServiceVolumeList:type_name -> pb.PServiceVolume
	12, // 47: pb.PCostMetaCheckData.TiDBClusterList:type_name -> pb.PTidbCluster
	13, // 48: pb.PCostMetaCheckData.TiDBPodList:type_name -> pb.PTidbPods
	15, // 49: pb.PCostMetaCheckData.HostMsgList:type_name -> pb.PHostMsg
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_cost_meta_check_data_proto_init() }
func file_cost_meta_check_data_proto_init() {
	if File_cost_meta_check_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cost_meta_check_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PProvisioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PStorageClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMwCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMwContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMwVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PClusterPhysical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PServiceContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPersistVolumeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PServiceVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTidbCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTidbPods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PClusterMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHostMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_meta_check_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCostMetaCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cost_meta_check_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cost_meta_check_data_proto_goTypes,
		DependencyIndexes: file_cost_meta_check_data_proto_depIdxs,
		MessageInfos:      file_cost_meta_check_data_proto_msgTypes,
	}.Build()
	File_cost_meta_check_data_proto = out.File
	file_cost_meta_check_data_proto_rawDesc = nil
	file_cost_meta_check_data_proto_goTypes = nil
	file_cost_meta_check_data_proto_depIdxs = nil
}
