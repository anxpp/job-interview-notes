// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: logic_cost_meta_check_data.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LProvisioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id              uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ProvisionerName string                 `protobuf:"bytes,4,opt,name=ProvisionerName,proto3" json:"ProvisionerName,omitempty"`
	ProvisionerType string                 `protobuf:"bytes,5,opt,name=ProvisionerType,proto3" json:"ProvisionerType,omitempty"`
	CapAlgorithm    uint32                 `protobuf:"varint,6,opt,name=CapAlgorithm,proto3" json:"CapAlgorithm,omitempty"`
}

func (x *LProvisioner) Reset() {
	*x = LProvisioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LProvisioner) ProtoMessage() {}

func (x *LProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LProvisioner.ProtoReflect.Descriptor instead.
func (*LProvisioner) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{0}
}

func (x *LProvisioner) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LProvisioner) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LProvisioner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LProvisioner) GetProvisionerName() string {
	if x != nil {
		return x.ProvisionerName
	}
	return ""
}

func (x *LProvisioner) GetProvisionerType() string {
	if x != nil {
		return x.ProvisionerType
	}
	return ""
}

func (x *LProvisioner) GetCapAlgorithm() uint32 {
	if x != nil {
		return x.CapAlgorithm
	}
	return 0
}

type LTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id        uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *LTenant) Reset() {
	*x = LTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTenant) ProtoMessage() {}

func (x *LTenant) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTenant.ProtoReflect.Descriptor instead.
func (*LTenant) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{1}
}

func (x *LTenant) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LTenant) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LTenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LStorageClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id                uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ClassName         string                 `protobuf:"bytes,3,opt,name=ClassName,proto3" json:"ClassName,omitempty"`
	Provisioner       string                 `protobuf:"bytes,4,opt,name=Provisioner,proto3" json:"Provisioner,omitempty"`
	ProvisionerId     uint32                 `protobuf:"varint,5,opt,name=ProvisionerId,proto3" json:"ProvisionerId,omitempty"`
	PhysicalClusterId uint32                 `protobuf:"varint,6,opt,name=PhysicalClusterId,proto3" json:"PhysicalClusterId,omitempty"`
}

func (x *LStorageClass) Reset() {
	*x = LStorageClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LStorageClass) ProtoMessage() {}

func (x *LStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LStorageClass.ProtoReflect.Descriptor instead.
func (*LStorageClass) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{2}
}

func (x *LStorageClass) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LStorageClass) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LStorageClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *LStorageClass) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *LStorageClass) GetProvisionerId() uint32 {
	if x != nil {
		return x.ProvisionerId
	}
	return 0
}

func (x *LStorageClass) GetPhysicalClusterId() uint32 {
	if x != nil {
		return x.PhysicalClusterId
	}
	return 0
}

type LCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id        uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	NameCh    string                 `protobuf:"bytes,4,opt,name=NameCh,proto3" json:"NameCh,omitempty"`
	NodeIps   []uint32               `protobuf:"varint,5,rep,packed,name=NodeIps,proto3" json:"NodeIps,omitempty"`
}

func (x *LCluster) Reset() {
	*x = LCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LCluster) ProtoMessage() {}

func (x *LCluster) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LCluster.ProtoReflect.Descriptor instead.
func (*LCluster) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{3}
}

func (x *LCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LCluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LCluster) GetNameCh() string {
	if x != nil {
		return x.NameCh
	}
	return ""
}

func (x *LCluster) GetNodeIps() []uint32 {
	if x != nil {
		return x.NodeIps
	}
	return nil
}

type LMwCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	MwClusterName string                 `protobuf:"bytes,3,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	MwClusterType string                 `protobuf:"bytes,4,opt,name=MwClusterType,proto3" json:"MwClusterType,omitempty"`
	TenantId      uint32                 `protobuf:"varint,5,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	ClusterId     uint32                 `protobuf:"varint,6,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
}

func (x *LMwCluster) Reset() {
	*x = LMwCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LMwCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LMwCluster) ProtoMessage() {}

func (x *LMwCluster) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LMwCluster.ProtoReflect.Descriptor instead.
func (*LMwCluster) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{4}
}

func (x *LMwCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LMwCluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LMwCluster) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *LMwCluster) GetMwClusterType() string {
	if x != nil {
		return x.MwClusterType
	}
	return ""
}

func (x *LMwCluster) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *LMwCluster) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type LMwContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id              uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	InstanceName    string                 `protobuf:"bytes,3,opt,name=InstanceName,proto3" json:"InstanceName,omitempty"`
	ComponentName   string                 `protobuf:"bytes,4,opt,name=ComponentName,proto3" json:"ComponentName,omitempty"`
	MwClusterName   string                 `protobuf:"bytes,5,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	ClusterId       uint32                 `protobuf:"varint,6,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	TenantId        uint32                 `protobuf:"varint,7,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	Name            string                 `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	ContainerCPU    uint32                 `protobuf:"varint,9,opt,name=ContainerCPU,proto3" json:"ContainerCPU,omitempty"`
	ContainerMemory uint32                 `protobuf:"varint,10,opt,name=ContainerMemory,proto3" json:"ContainerMemory,omitempty"`
	ContainerGPU    uint32                 `protobuf:"varint,11,opt,name=ContainerGPU,proto3" json:"ContainerGPU,omitempty"`
}

func (x *LMwContainer) Reset() {
	*x = LMwContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LMwContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LMwContainer) ProtoMessage() {}

func (x *LMwContainer) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LMwContainer.ProtoReflect.Descriptor instead.
func (*LMwContainer) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{5}
}

func (x *LMwContainer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LMwContainer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LMwContainer) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *LMwContainer) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *LMwContainer) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *LMwContainer) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *LMwContainer) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *LMwContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LMwContainer) GetContainerCPU() uint32 {
	if x != nil {
		return x.ContainerCPU
	}
	return 0
}

func (x *LMwContainer) GetContainerMemory() uint32 {
	if x != nil {
		return x.ContainerMemory
	}
	return 0
}

func (x *LMwContainer) GetContainerGPU() uint32 {
	if x != nil {
		return x.ContainerGPU
	}
	return 0
}

type LMwVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id               uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ComponentName    string                 `protobuf:"bytes,3,opt,name=ComponentName,proto3" json:"ComponentName,omitempty"`
	MwClusterName    string                 `protobuf:"bytes,4,opt,name=MwClusterName,proto3" json:"MwClusterName,omitempty"`
	ClusterId        uint32                 `protobuf:"varint,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	TenantId         uint32                 `protobuf:"varint,6,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	VolumeType       string                 `protobuf:"bytes,7,opt,name=VolumeType,proto3" json:"VolumeType,omitempty"`
	VolumeName       string                 `protobuf:"bytes,8,opt,name=VolumeName,proto3" json:"VolumeName,omitempty"`
	StorageClassName string                 `protobuf:"bytes,9,opt,name=StorageClassName,proto3" json:"StorageClassName,omitempty"`
	Quantity         uint32                 `protobuf:"varint,10,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Quota            uint32                 `protobuf:"varint,11,opt,name=Quota,proto3" json:"Quota,omitempty"`
}

func (x *LMwVolume) Reset() {
	*x = LMwVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LMwVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LMwVolume) ProtoMessage() {}

func (x *LMwVolume) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LMwVolume.ProtoReflect.Descriptor instead.
func (*LMwVolume) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{6}
}

func (x *LMwVolume) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LMwVolume) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LMwVolume) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *LMwVolume) GetMwClusterName() string {
	if x != nil {
		return x.MwClusterName
	}
	return ""
}

func (x *LMwVolume) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *LMwVolume) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *LMwVolume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *LMwVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *LMwVolume) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *LMwVolume) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *LMwVolume) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

type LClusterPhysical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id        uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Code      string                 `protobuf:"bytes,4,opt,name=Code,proto3" json:"Code,omitempty"`
	Type      uint32                 `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Category  string                 `protobuf:"bytes,6,opt,name=Category,proto3" json:"Category,omitempty"`
}

func (x *LClusterPhysical) Reset() {
	*x = LClusterPhysical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LClusterPhysical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LClusterPhysical) ProtoMessage() {}

func (x *LClusterPhysical) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LClusterPhysical.ProtoReflect.Descriptor instead.
func (*LClusterPhysical) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{7}
}

func (x *LClusterPhysical) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LClusterPhysical) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LClusterPhysical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LClusterPhysical) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LClusterPhysical) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LClusterPhysical) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type LService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id          uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterId   uint32                 `protobuf:"varint,3,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	TenantId    uint32                 `protobuf:"varint,4,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	ServiceName string                 `protobuf:"bytes,5,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	Replicas    uint32                 `protobuf:"varint,6,opt,name=Replicas,proto3" json:"Replicas,omitempty"`
}

func (x *LService) Reset() {
	*x = LService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LService) ProtoMessage() {}

func (x *LService) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LService.ProtoReflect.Descriptor instead.
func (*LService) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{8}
}

func (x *LService) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LService) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LService) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *LService) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *LService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *LService) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type LServiceContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id              uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterID       uint32                 `protobuf:"varint,3,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	TenantID        uint32                 `protobuf:"varint,4,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	ServiceID       uint32                 `protobuf:"varint,5,opt,name=ServiceID,proto3" json:"ServiceID,omitempty"`
	Name            string                 `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	ContainerCPU    uint32                 `protobuf:"varint,7,opt,name=ContainerCPU,proto3" json:"ContainerCPU,omitempty"`
	ContainerMemory uint32                 `protobuf:"varint,8,opt,name=ContainerMemory,proto3" json:"ContainerMemory,omitempty"`
	ContainerGPU    uint32                 `protobuf:"varint,9,opt,name=ContainerGPU,proto3" json:"ContainerGPU,omitempty"`
}

func (x *LServiceContainer) Reset() {
	*x = LServiceContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LServiceContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LServiceContainer) ProtoMessage() {}

func (x *LServiceContainer) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LServiceContainer.ProtoReflect.Descriptor instead.
func (*LServiceContainer) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{9}
}

func (x *LServiceContainer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LServiceContainer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LServiceContainer) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *LServiceContainer) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *LServiceContainer) GetServiceID() uint32 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

func (x *LServiceContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LServiceContainer) GetContainerCPU() uint32 {
	if x != nil {
		return x.ContainerCPU
	}
	return 0
}

func (x *LServiceContainer) GetContainerMemory() uint32 {
	if x != nil {
		return x.ContainerMemory
	}
	return 0
}

func (x *LServiceContainer) GetContainerGPU() uint32 {
	if x != nil {
		return x.ContainerGPU
	}
	return 0
}

type LPersistVolumeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessMode       []string `protobuf:"bytes,1,rep,name=AccessMode,proto3" json:"AccessMode,omitempty"`
	StorageClassName string   `protobuf:"bytes,2,opt,name=StorageClassName,proto3" json:"StorageClassName,omitempty"`
	Quantity         string   `protobuf:"bytes,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *LPersistVolumeConf) Reset() {
	*x = LPersistVolumeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPersistVolumeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPersistVolumeConf) ProtoMessage() {}

func (x *LPersistVolumeConf) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPersistVolumeConf.ProtoReflect.Descriptor instead.
func (*LPersistVolumeConf) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{10}
}

func (x *LPersistVolumeConf) GetAccessMode() []string {
	if x != nil {
		return x.AccessMode
	}
	return nil
}

func (x *LPersistVolumeConf) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *LPersistVolumeConf) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

type LServiceVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id                uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ServiceID         uint32                 `protobuf:"varint,3,opt,name=ServiceID,proto3" json:"ServiceID,omitempty"`
	TenantID          uint32                 `protobuf:"varint,4,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	ClusterID         uint32                 `protobuf:"varint,5,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	VolumeType        string                 `protobuf:"bytes,6,opt,name=VolumeType,proto3" json:"VolumeType,omitempty"`
	PersistColumnConf *LPersistVolumeConf    `protobuf:"bytes,7,opt,name=PersistColumnConf,proto3" json:"PersistColumnConf,omitempty"`
}

func (x *LServiceVolume) Reset() {
	*x = LServiceVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LServiceVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LServiceVolume) ProtoMessage() {}

func (x *LServiceVolume) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LServiceVolume.ProtoReflect.Descriptor instead.
func (*LServiceVolume) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{11}
}

func (x *LServiceVolume) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LServiceVolume) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LServiceVolume) GetServiceID() uint32 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

func (x *LServiceVolume) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *LServiceVolume) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *LServiceVolume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *LServiceVolume) GetPersistColumnConf() *LPersistVolumeConf {
	if x != nil {
		return x.PersistColumnConf
	}
	return nil
}

type LTidbCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id                uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	TenantID          uint32                 `protobuf:"varint,3,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	PhysicalClusterID uint32                 `protobuf:"varint,4,opt,name=PhysicalClusterID,proto3" json:"PhysicalClusterID,omitempty"`
	ClusterName       string                 `protobuf:"bytes,5,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
}

func (x *LTidbCluster) Reset() {
	*x = LTidbCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTidbCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTidbCluster) ProtoMessage() {}

func (x *LTidbCluster) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTidbCluster.ProtoReflect.Descriptor instead.
func (*LTidbCluster) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{12}
}

func (x *LTidbCluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LTidbCluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LTidbCluster) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

func (x *LTidbCluster) GetPhysicalClusterID() uint32 {
	if x != nil {
		return x.PhysicalClusterID
	}
	return 0
}

func (x *LTidbCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type LTidbPods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id                uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Name              string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	PhysicalClusterID uint32                 `protobuf:"varint,4,opt,name=PhysicalClusterID,proto3" json:"PhysicalClusterID,omitempty"`
	TidbClusterID     uint32                 `protobuf:"varint,5,opt,name=TidbClusterID,proto3" json:"TidbClusterID,omitempty"`
	Cpu               uint32                 `protobuf:"varint,6,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Memory            uint32                 `protobuf:"varint,7,opt,name=Memory,proto3" json:"Memory,omitempty"`
	LocalPv           uint32                 `protobuf:"varint,8,opt,name=LocalPv,proto3" json:"LocalPv,omitempty"`
	TenantID          uint32                 `protobuf:"varint,9,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
}

func (x *LTidbPods) Reset() {
	*x = LTidbPods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTidbPods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTidbPods) ProtoMessage() {}

func (x *LTidbPods) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTidbPods.ProtoReflect.Descriptor instead.
func (*LTidbPods) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{13}
}

func (x *LTidbPods) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LTidbPods) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LTidbPods) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LTidbPods) GetPhysicalClusterID() uint32 {
	if x != nil {
		return x.PhysicalClusterID
	}
	return 0
}

func (x *LTidbPods) GetTidbClusterID() uint32 {
	if x != nil {
		return x.TidbClusterID
	}
	return 0
}

func (x *LTidbPods) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *LTidbPods) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *LTidbPods) GetLocalPv() uint32 {
	if x != nil {
		return x.LocalPv
	}
	return 0
}

func (x *LTidbPods) GetTenantID() uint32 {
	if x != nil {
		return x.TenantID
	}
	return 0
}

type LClusterMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id         uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterID  uint32                 `protobuf:"varint,3,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	PhysicalID uint32                 `protobuf:"varint,4,opt,name=PhysicalID,proto3" json:"PhysicalID,omitempty"`
}

func (x *LClusterMap) Reset() {
	*x = LClusterMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LClusterMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LClusterMap) ProtoMessage() {}

func (x *LClusterMap) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LClusterMap.ProtoReflect.Descriptor instead.
func (*LClusterMap) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{14}
}

func (x *LClusterMap) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LClusterMap) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LClusterMap) GetClusterID() uint32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *LClusterMap) GetPhysicalID() uint32 {
	if x != nil {
		return x.PhysicalID
	}
	return 0
}

type LHostMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id                uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	PhysicalClusterId uint32                 `protobuf:"varint,3,opt,name=PhysicalClusterId,proto3" json:"PhysicalClusterId,omitempty"`
	LogicClusterIds   []uint32               `protobuf:"varint,4,rep,packed,name=LogicClusterIds,proto3" json:"LogicClusterIds,omitempty"`
	Ip                uint32                 `protobuf:"varint,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	HostDisk          string                 `protobuf:"bytes,6,opt,name=HostDisk,proto3" json:"HostDisk,omitempty"`
	CpuCapacity       uint32                 `protobuf:"varint,7,opt,name=CpuCapacity,proto3" json:"CpuCapacity,omitempty"`
	MemCapacity       uint32                 `protobuf:"varint,8,opt,name=MemCapacity,proto3" json:"MemCapacity,omitempty"`
	GpuCapacity       uint32                 `protobuf:"varint,9,opt,name=GpuCapacity,proto3" json:"GpuCapacity,omitempty"`
	GpuSize           uint32                 `protobuf:"varint,10,opt,name=GpuSize,proto3" json:"GpuSize,omitempty"`
}

func (x *LHostMsg) Reset() {
	*x = LHostMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHostMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHostMsg) ProtoMessage() {}

func (x *LHostMsg) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHostMsg.ProtoReflect.Descriptor instead.
func (*LHostMsg) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{15}
}

func (x *LHostMsg) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LHostMsg) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LHostMsg) GetPhysicalClusterId() uint32 {
	if x != nil {
		return x.PhysicalClusterId
	}
	return 0
}

func (x *LHostMsg) GetLogicClusterIds() []uint32 {
	if x != nil {
		return x.LogicClusterIds
	}
	return nil
}

func (x *LHostMsg) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *LHostMsg) GetHostDisk() string {
	if x != nil {
		return x.HostDisk
	}
	return ""
}

func (x *LHostMsg) GetCpuCapacity() uint32 {
	if x != nil {
		return x.CpuCapacity
	}
	return 0
}

func (x *LHostMsg) GetMemCapacity() uint32 {
	if x != nil {
		return x.MemCapacity
	}
	return 0
}

func (x *LHostMsg) GetGpuCapacity() uint32 {
	if x != nil {
		return x.GpuCapacity
	}
	return 0
}

func (x *LHostMsg) GetGpuSize() uint32 {
	if x != nil {
		return x.GpuSize
	}
	return 0
}

// protoc --go_out=. cost_meta_check_data.proto
type LCostMetaCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionerList         []*LProvisioner      `protobuf:"bytes,1,rep,name=ProvisionerList,proto3" json:"ProvisionerList,omitempty"`
	TenantList              []*LTenant           `protobuf:"bytes,2,rep,name=TenantList,proto3" json:"TenantList,omitempty"`
	StorageClassList        []*LStorageClass     `protobuf:"bytes,3,rep,name=StorageClassList,proto3" json:"StorageClassList,omitempty"`
	ClusterMapList          []*LClusterMap       `protobuf:"bytes,4,rep,name=ClusterMapList,proto3" json:"ClusterMapList,omitempty"`
	ClusterPhysical         *LClusterPhysical    `protobuf:"bytes,5,opt,name=ClusterPhysical,proto3" json:"ClusterPhysical,omitempty"`
	HostMsgList             []*LHostMsg          `protobuf:"bytes,6,rep,name=HostMsgList,proto3" json:"HostMsgList,omitempty"`
	ClusterLogic            []*LCluster          `protobuf:"bytes,7,rep,name=ClusterLogic,proto3" json:"ClusterLogic,omitempty"`
	MiddlewareClusterList   []*LMwCluster        `protobuf:"bytes,8,rep,name=MiddlewareClusterList,proto3" json:"MiddlewareClusterList,omitempty"`
	MiddlewareContainerList []*LMwContainer      `protobuf:"bytes,9,rep,name=MiddlewareContainerList,proto3" json:"MiddlewareContainerList,omitempty"`
	MiddlewareVolumeList    []*LMwVolume         `protobuf:"bytes,10,rep,name=MiddlewareVolumeList,proto3" json:"MiddlewareVolumeList,omitempty"`
	ServiceList             []*LService          `protobuf:"bytes,11,rep,name=ServiceList,proto3" json:"ServiceList,omitempty"`
	ServiceContainerList    []*LServiceContainer `protobuf:"bytes,12,rep,name=ServiceContainerList,proto3" json:"ServiceContainerList,omitempty"`
	ServiceVolumeList       []*LServiceVolume    `protobuf:"bytes,13,rep,name=ServiceVolumeList,proto3" json:"ServiceVolumeList,omitempty"`
	ClusterPhysicalTiDB     *LClusterPhysical    `protobuf:"bytes,14,opt,name=ClusterPhysicalTiDB,proto3" json:"ClusterPhysicalTiDB,omitempty"`
	HostMsgListTiDB         []*LHostMsg          `protobuf:"bytes,15,rep,name=HostMsgListTiDB,proto3" json:"HostMsgListTiDB,omitempty"`
	TiDBClusterList         []*LTidbCluster      `protobuf:"bytes,16,rep,name=TiDBClusterList,proto3" json:"TiDBClusterList,omitempty"`
	TiDBPodList             []*LTidbPods         `protobuf:"bytes,17,rep,name=TiDBPodList,proto3" json:"TiDBPodList,omitempty"`
}

func (x *LCostMetaCheckData) Reset() {
	*x = LCostMetaCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_cost_meta_check_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LCostMetaCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LCostMetaCheckData) ProtoMessage() {}

func (x *LCostMetaCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_logic_cost_meta_check_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LCostMetaCheckData.ProtoReflect.Descriptor instead.
func (*LCostMetaCheckData) Descriptor() ([]byte, []int) {
	return file_logic_cost_meta_check_data_proto_rawDescGZIP(), []int{16}
}

func (x *LCostMetaCheckData) GetProvisionerList() []*LProvisioner {
	if x != nil {
		return x.ProvisionerList
	}
	return nil
}

func (x *LCostMetaCheckData) GetTenantList() []*LTenant {
	if x != nil {
		return x.TenantList
	}
	return nil
}

func (x *LCostMetaCheckData) GetStorageClassList() []*LStorageClass {
	if x != nil {
		return x.StorageClassList
	}
	return nil
}

func (x *LCostMetaCheckData) GetClusterMapList() []*LClusterMap {
	if x != nil {
		return x.ClusterMapList
	}
	return nil
}

func (x *LCostMetaCheckData) GetClusterPhysical() *LClusterPhysical {
	if x != nil {
		return x.ClusterPhysical
	}
	return nil
}

func (x *LCostMetaCheckData) GetHostMsgList() []*LHostMsg {
	if x != nil {
		return x.HostMsgList
	}
	return nil
}

func (x *LCostMetaCheckData) GetClusterLogic() []*LCluster {
	if x != nil {
		return x.ClusterLogic
	}
	return nil
}

func (x *LCostMetaCheckData) GetMiddlewareClusterList() []*LMwCluster {
	if x != nil {
		return x.MiddlewareClusterList
	}
	return nil
}

func (x *LCostMetaCheckData) GetMiddlewareContainerList() []*LMwContainer {
	if x != nil {
		return x.MiddlewareContainerList
	}
	return nil
}

func (x *LCostMetaCheckData) GetMiddlewareVolumeList() []*LMwVolume {
	if x != nil {
		return x.MiddlewareVolumeList
	}
	return nil
}

func (x *LCostMetaCheckData) GetServiceList() []*LService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *LCostMetaCheckData) GetServiceContainerList() []*LServiceContainer {
	if x != nil {
		return x.ServiceContainerList
	}
	return nil
}

func (x *LCostMetaCheckData) GetServiceVolumeList() []*LServiceVolume {
	if x != nil {
		return x.ServiceVolumeList
	}
	return nil
}

func (x *LCostMetaCheckData) GetClusterPhysicalTiDB() *LClusterPhysical {
	if x != nil {
		return x.ClusterPhysicalTiDB
	}
	return nil
}

func (x *LCostMetaCheckData) GetHostMsgListTiDB() []*LHostMsg {
	if x != nil {
		return x.HostMsgListTiDB
	}
	return nil
}

func (x *LCostMetaCheckData) GetTiDBClusterList() []*LTidbCluster {
	if x != nil {
		return x.TiDBClusterList
	}
	return nil
}

func (x *LCostMetaCheckData) GetTiDBPodList() []*LTidbPods {
	if x != nil {
		return x.TiDBPodList
	}
	return nil
}

var File_logic_cost_meta_check_data_proto protoreflect.FileDescriptor

var file_logic_cost_meta_check_data_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x4c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61,
	0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x61, 0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x67,
	0x0a, 0x07, 0x4c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x4c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x4c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x70, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4c, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x4c, 0x4d, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x77, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x22, 0xf9,
	0x02, 0x0a, 0x09, 0x4c, 0x4d, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x4c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0xbb, 0x02, 0x0a, 0x11, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x50, 0x55,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x50, 0x55, 0x22, 0x7c,
	0x0a, 0x12, 0x4c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x98, 0x02, 0x0a,
	0x0e, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x11, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x4c, 0x54, 0x69, 0x64,
	0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d,
	0x02, 0x0a, 0x09, 0x4c, 0x54, 0x69, 0x64, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x64, 0x62,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x54, 0x69, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x70, 0x75,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x95,
	0x01, 0x0a, 0x0b, 0x4c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x22, 0xd8, 0x02, 0x0a, 0x08, 0x4c, 0x48, 0x6f, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x70, 0x75, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x70, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x70, 0x75, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x96, 0x08, 0x0a, 0x12, 0x4c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x10,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0b, 0x48, 0x6f, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x48, 0x6f,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x15, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x4d, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x15, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x4d, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x14, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x4d, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x14, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x69, 0x44, 0x42, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x44, 0x42, 0x12, 0x36, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x44, 0x42, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x48, 0x6f,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x44, 0x42, 0x12, 0x3a, 0x0a,
	0x0f, 0x54, 0x69, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x54, 0x69, 0x64,
	0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x54, 0x69, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x54, 0x69, 0x44,
	0x42, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x54, 0x69, 0x64, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x0b, 0x54,
	0x69, 0x44, 0x42, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x3d, 0x5a, 0x3b, 0x6d, 0x73,
	0x78, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x73,
	0x78, 0x66, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_logic_cost_meta_check_data_proto_rawDescOnce sync.Once
	file_logic_cost_meta_check_data_proto_rawDescData = file_logic_cost_meta_check_data_proto_rawDesc
)

func file_logic_cost_meta_check_data_proto_rawDescGZIP() []byte {
	file_logic_cost_meta_check_data_proto_rawDescOnce.Do(func() {
		file_logic_cost_meta_check_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_logic_cost_meta_check_data_proto_rawDescData)
	})
	return file_logic_cost_meta_check_data_proto_rawDescData
}

var file_logic_cost_meta_check_data_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_logic_cost_meta_check_data_proto_goTypes = []interface{}{
	(*LProvisioner)(nil),          // 0: pb.LProvisioner
	(*LTenant)(nil),               // 1: pb.LTenant
	(*LStorageClass)(nil),         // 2: pb.LStorageClass
	(*LCluster)(nil),              // 3: pb.LCluster
	(*LMwCluster)(nil),            // 4: pb.LMwCluster
	(*LMwContainer)(nil),          // 5: pb.LMwContainer
	(*LMwVolume)(nil),             // 6: pb.LMwVolume
	(*LClusterPhysical)(nil),      // 7: pb.LClusterPhysical
	(*LService)(nil),              // 8: pb.LService
	(*LServiceContainer)(nil),     // 9: pb.LServiceContainer
	(*LPersistVolumeConf)(nil),    // 10: pb.LPersistVolumeConf
	(*LServiceVolume)(nil),        // 11: pb.LServiceVolume
	(*LTidbCluster)(nil),          // 12: pb.LTidbCluster
	(*LTidbPods)(nil),             // 13: pb.LTidbPods
	(*LClusterMap)(nil),           // 14: pb.LClusterMap
	(*LHostMsg)(nil),              // 15: pb.LHostMsg
	(*LCostMetaCheckData)(nil),    // 16: pb.LCostMetaCheckData
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_logic_cost_meta_check_data_proto_depIdxs = []int32{
	17, // 0: pb.LProvisioner.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 1: pb.LTenant.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 2: pb.LStorageClass.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 3: pb.LCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 4: pb.LMwCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 5: pb.LMwContainer.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 6: pb.LMwVolume.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 7: pb.LClusterPhysical.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 8: pb.LService.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 9: pb.LServiceContainer.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 10: pb.LServiceVolume.UpdatedAt:type_name -> google.protobuf.Timestamp
	10, // 11: pb.LServiceVolume.PersistColumnConf:type_name -> pb.LPersistVolumeConf
	17, // 12: pb.LTidbCluster.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 13: pb.LTidbPods.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 14: pb.LClusterMap.UpdatedAt:type_name -> google.protobuf.Timestamp
	17, // 15: pb.LHostMsg.UpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 16: pb.LCostMetaCheckData.ProvisionerList:type_name -> pb.LProvisioner
	1,  // 17: pb.LCostMetaCheckData.TenantList:type_name -> pb.LTenant
	2,  // 18: pb.LCostMetaCheckData.StorageClassList:type_name -> pb.LStorageClass
	14, // 19: pb.LCostMetaCheckData.ClusterMapList:type_name -> pb.LClusterMap
	7,  // 20: pb.LCostMetaCheckData.ClusterPhysical:type_name -> pb.LClusterPhysical
	15, // 21: pb.LCostMetaCheckData.HostMsgList:type_name -> pb.LHostMsg
	3,  // 22: pb.LCostMetaCheckData.ClusterLogic:type_name -> pb.LCluster
	4,  // 23: pb.LCostMetaCheckData.MiddlewareClusterList:type_name -> pb.LMwCluster
	5,  // 24: pb.LCostMetaCheckData.MiddlewareContainerList:type_name -> pb.LMwContainer
	6,  // 25: pb.LCostMetaCheckData.MiddlewareVolumeList:type_name -> pb.LMwVolume
	8,  // 26: pb.LCostMetaCheckData.ServiceList:type_name -> pb.LService
	9,  // 27: pb.LCostMetaCheckData.ServiceContainerList:type_name -> pb.LServiceContainer
	11, // 28: pb.LCostMetaCheckData.ServiceVolumeList:type_name -> pb.LServiceVolume
	7,  // 29: pb.LCostMetaCheckData.ClusterPhysicalTiDB:type_name -> pb.LClusterPhysical
	15, // 30: pb.LCostMetaCheckData.HostMsgListTiDB:type_name -> pb.LHostMsg
	12, // 31: pb.LCostMetaCheckData.TiDBClusterList:type_name -> pb.LTidbCluster
	13, // 32: pb.LCostMetaCheckData.TiDBPodList:type_name -> pb.LTidbPods
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_logic_cost_meta_check_data_proto_init() }
func file_logic_cost_meta_check_data_proto_init() {
	if File_logic_cost_meta_check_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logic_cost_meta_check_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LProvisioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LStorageClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LMwCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LMwContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LMwVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LClusterPhysical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LServiceContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPersistVolumeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LServiceVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTidbCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTidbPods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LClusterMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHostMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_cost_meta_check_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LCostMetaCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logic_cost_meta_check_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logic_cost_meta_check_data_proto_goTypes,
		DependencyIndexes: file_logic_cost_meta_check_data_proto_depIdxs,
		MessageInfos:      file_logic_cost_meta_check_data_proto_msgTypes,
	}.Build()
	File_logic_cost_meta_check_data_proto = out.File
	file_logic_cost_meta_check_data_proto_rawDesc = nil
	file_logic_cost_meta_check_data_proto_goTypes = nil
	file_logic_cost_meta_check_data_proto_depIdxs = nil
}
